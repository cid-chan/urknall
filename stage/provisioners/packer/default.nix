{ lib, config, localPkgs, ... }:
let
  cfg = config.provisioners.packer;

  module = 
    let
      rawFile = localPkgs.writeText "raw.pkr.hcl" ''
        # This file has been automatically generated by Urknall.
        # Do not edit this file manually.

        ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (k: v: ''
          variable "${k}" {
            type = string
          }
        '') cfg.project.variables)}

        ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (k: v: ''
          variable "${k}" {
            type = string
            sensitive = true
          }
        '') cfg.project.sensitiveVariables)}

        ${cfg.project.module}
      '';
    in
    localPkgs.runCommand "main.pkr.hcl" {} ''
      cd /build
      dd if=${rawFile} of=./main.pkr.hcl
      ${localPkgs.packer}/bin/packer fmt /build || (cat ${rawFile} && false)
      cp ./main.pkr.hcl $out
    '';

  variables = ''
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (k: v: ''
      export PKR_VAR_${k}=$(${v})
    '') cfg.project.variables)}
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (k: v: ''
      export PKR_VAR_${k}=$(${v})
    '') cfg.project.sensitiveVariables)}
  '';

  setupCommands = noOutput: ''
    ln -sf ${module} main.pkr.hcl
    if [[ ! -e "${cfg.project.homePath}" ]]; then
      mkdir -p "${cfg.project.homePath}"
    fi
    export PACKER_CONFIG_DIR="${cfg.project.homePath}"
    ${variables}
    ${cfg.project.setup}

    if [[ -d assets ]]; then
      rm -rf assets
    fi
    mkdir assets
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (_: v: ''
      cp ${toString v.file} assets/${v.name}
      chmod ${v.chmod} assets/${v.name}
    '') cfg.project.assets)}

    ${localPkgs.packer}/bin/packer init . ${lib.optionalString noOutput ">/dev/null 2>/dev/null"}
  '';
in
{
  imports = [
    ./clouds
    ./backend.nix
  ];

  options = let inherit (lib) mkOption mkEnableOption; inherit (lib.types) nullOr attrsOf anything str lines separatedString submodule bool; in {
    provisioners.packer = {
      enable = mkEnableOption "packer";

      project = {
        setup = mkOption {
          type = lines;
          default = "";
          description = ''
            Code to execute before running packer.
          '';
        };

        teardown = mkOption {
          type = lines;
          default = "";
          description = ''
            Code to execute after running packer.
          '';
        };

        homePath = mkOption {
          type = str;
          default = "$URKNALL_LOCAL_DIRECTORY/.packer";
          description = ''
            The data directory of packer.
          '';
        };

        variables = mkOption {
          type = attrsOf str;
          default = {};
          description = ''
            Variables to define within the packer module.
          '';
        };

        sensitiveVariables = mkOption {
          type = attrsOf str;
          default = {};
          description = ''
            Sensitive variables.
          '';
        };

        assets = mkOption {
          type = attrsOf (submodule ({ config, ... }: {
            options = {
              name = mkOption {
                type = str;
                default = config._module.args.name;
                description = ''
                  The name of the asset.
                '';
              };

              file = mkOption {
                type = str;
                description = ''
                  A path to the file to include.
                '';
              };

              chmod = mkOption {
                type = str;
                default = "0644";
                description = ''
                  The chmod of the asset.
                '';
              };

              path = mkOption {
                type = str;
                default = "assets/${builtins.baseNameOf config.name}";
              };
            };
          }));
          default = {};
          description = ''
            Assets to include in the 
          '';
        };

        module = mkOption {
          type = lines;
          default = "";
          description = ''
            The packer module code.
          '';
        };

        arguments = mkOption {
          type = separatedString " ";
          default = "";
          description = ''
            Parameters to append to packer.
          '';
        };
      };

    };
  };

  config = lib.mkIf (cfg.enable) {
    urknall.appliers = ''
      echo Using ${module} as main.pkr.hcl
      ${setupCommands false}
      ${localPkgs.packer}/bin/packer build -force ${cfg.project.arguments} .
      ${cfg.project.teardown}
    '';

    urknall.destroyers = ''
      echo Using ${module} as main.pkr.hcl
      ${setupCommands false}
    '';
  };
}

